name: Release Images

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version de la release (ex: v1.5.0)"
        required: true
        type: string

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_tag: ${{ github.event.inputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Vérifier si le tag existe déjà
        id: check_tag
        run: |
          if git rev-parse "refs/tags/${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "Tag déjà existant!"
            exit 1
          fi

      - name: Créer et Pousser le Tag Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git tag -a "${{ github.event.inputs.version }}" -m "Release ${{ github.event.inputs.version }}"
          git push origin "${{ github.event.inputs.version }}"

      - name: Créer la Release GitHub
        id: create-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: "Release ${{ github.event.inputs.version }}"
          body: "Nouvelle version ${{ github.event.inputs.version }} disponible"
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  retrieve-build:
    name: Récupérer le dernier Build Réussi
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Télécharger les fichiers du dernier build réussi
        run: |
          RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=success&branch=develop" | jq -r '.workflow_runs[0].id')
          echo "Dernier build réussi: $RUN_ID"

          mkdir -p ./build/output/images/
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts" | jq -r '.artifacts[] | select(.name | test(".*img.xz")) | .archive_download_url' | while read url; do
            curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -L "$url" -o ./build/output/images/artifact.zip
            unzip ./build/output/images/artifact.zip -d ./build/output/images/
          done

      - name: Vérifier l'existence des fichiers
        run: ls -lah ./build/output/images/

  upload-files:
    name: Upload Files to Release
    runs-on: ubuntu-latest
    needs: retrieve-build
    steps:
      - name: Vérifier les fichiers d'image
        run: |
          echo "Liste des fichiers disponibles:"
          ls -lah ./build/output/images/

      - name: Upload Image Compressée
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/output/images/*.img.xz
          tag_name: ${{ needs.release.outputs.release_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Checksum
        uses: softprops/action-gh-release@v1
        with:
          files: ./build/output/images/*.sha256
          tag_name: ${{ needs.release.outputs.release_tag }}
          token: ${{ secrets.GITHUB_TOKEN }}
